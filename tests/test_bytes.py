import subprocess

from pymammotion.proto.luba_msg_pb2 import LubaMsg
from pymammotion.utility.datatype_converter import DatatypeConverter

test = b'\x08\xf8\x01\x10\x01\x18\x07 \x02(\x010\x018\x80\x80 B\xcb\x01b\xc8\x01\n\x12\x08\x01\x10\x06\x18\x01"\n1.10.5.237\n\x1e\x08\x01\x10\x03\x18\x01"\x161.6.22.2040 (3be066bf)\n\x1c\x08\x02\x10\x03\x18\x01"\x141.1.1.622 (a993d995)\n\x1b\x08\x03\x10\x03\x18\x01"\x132.2.0.150 (2cf62fc)\n\x1b\x08\x04\x10\x03\x18\x01"\x132.2.0.150 (2cf62fc)\n\x0c\x08\x05\x10\x03\x18\x01"\x047361\n\x1e\x08\x06\x10\x03\x18\x01"\x161.6.22.2040 (3be066bf)\n\x0c\x08\x07\x10\x03\x18\x01"\x041.28'

sys_rapid_state_tunnel = b'\x08\xf4\x01\x10\x01\x18\x07(\xfc\xed\x0e0\x01R&\xca\x01#\n!\x04\x02+\xb4\xbf\x01IL\x1b\xea\xbe\xf6\xff\xff\xff\xff\xff\xff\x01\x9a$\xfe\x96\xda\xff\xff\xff\xff\xff\xff\x01\x05\x00'

systemTardStateTunnel = b'\x08\xf4\x01\x10\x01\x18\x07(\xbf\x96\x0b0\x01R`\xd2\x01]\n[\x0b\x01d<\x00\x00\xbc\xda\xcf\xf6\xf9\x98\xc2\xa8h\xb3\xe7\xcc\x90\xc3\x8e\x89\xbbm\xe1\x80\x84\x03\x00\x00\xba\xf3\xfe\xf1\xd6\x96\x91\xf2\x15\x81\xb2\xff\xff\xff\xff\xff\xff\xff\x01\xcc\x98\xfc\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x89\xaf\xb7\xe7\xf7\x84\xc6\xd3L\x00\xb9\x95\x8c\xf6\xe6\xeb\xc1\xe1Y\xde\xd9\xd2\xfc\xab\xc2\x9b\x903\x00'

get_base_info = b'M\x04\x00%\x08\xf8\x01\x10\x01\x18\x07 \x02(\x010\x01B\x16b\x14\n\x12\x08\x01\x10\x06\x18\x01"\n1.10.5.242'

# print(systemTardStateTunnel.hex())
# get hash
other = b'\x08\xf0\x01\x10\x07\x18\x01 \x01(\x010\x018\x01Z\x0b\xf2\x01\x08\x08\x01\x10\x02\x18\x01 \x01'

toapp_report_data = b'\x08\xf4\x01\x10\x01\x18\x07(\xc170\x01R\xb8\x01\xba\x02\xb4\x01\n\x18\x08\x01\x10\xb8\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\xcf\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x0e\x08\x0b\x10\x02\x18d(\x0e0\x95\xaf\xe5\xb1\x06\x1a\x13\x08\x04\x10\x02\x18 @\x80\x80\xb4\xf9\x91\x80\x80\x80\x03P\x980"-\x08\xa0\xab\xf7\xff\xff\xff\xff\xff\xff\x01\x10\xe4\xe0\xfc\xff\xff\xff\xff\xff\xff\x01\x18\xe7\xc8\xf8\xff\xff\xff\xff\xff\xff\x01 \x050\xe5\xa7\xe3\xd2\x93\xd2\xd5\x98**D\x10\xcf\xd6\xfa\xf5\xb5\xc1\xef\x9eC\x18\xd6\x80\xd8\x02 n0\xf0\xe0\x81\xc0\xa4\xe5\x81\xc5G8\x84\xa4\x07@\xfd\xf6\x07`\x99\xf0\x9b\xe0\xce\x88\xe2\x96Gp\xe2\xa5\xde\xf0\xe3\xbc\xaf\x8aQx\xfc\xb5\xf4\xf2\x8d\xa5\x80\xe7q\xa0\x01<'

# get all boundary hash
get_boundary_hash_list = b'\x08\xf0\x01\x10\x01\x18\x07(\xe1\x050\x01Z\x12\xfa\x01\x0f\x08\x01\x10\x03\x18\x01 \x010\x08@\x01j\x01\x00'

hash_ack_1 = b'\x08\xf0\x01\x10\x01\x18\x07(\x94\x060\x01Z\x95\x01\xfa\x01\x91\x01\x08\x01\x18\x01 \x010xj\x86\x01\xbb\x93\xc6\xf1\x8b\x9f\xd4\xf3D\xbc\xb2\xc1\xea\x8a\xcf\xd6\xc7o\xe1\xeb\xcc\xbf\xa7\xa3\x94\xc2\x07\xcd\xbb\xba\xe2\xa4\x88\xf5\x97E\xa4\xcc\x99\x91\xc2\xb3\xf9]\x80\xe8\xcc\xb3\xf1\xbb\xfc\xe5n\xb9\xd8\x96\xd0\x9e\xe6\xd6\xf5\x12\xe3\xe9\xe2\xc9\xea\x9a\x87\x88e\xf0\xe0\x81\xc0\xa4\xe5\x81\xc5G\xec\x95\xae\xaf\xbd\xd2\xec\x9f_\x86\x97\xd2\xd5\xaf\xc5\xf8\xa0z\xf8\xc4\x9b\xc8\xc7\xaf\xf2\xe9>\xc8\xa0\x8d\xdc\x9c\x9e\xed\xeb7\xbd\x8e\x81\x9e\xf7\x9d\x95\xe5o\xb8\xd4\xb7\xc6\xd0\xae\xcc\x9au'

commondata_ack = b'\x08\xf0\x01\x10\x01\x18\x07(\x93\x060\x01Z\x0f\x8a\x02\x0c\x08\x01\x18\x01 \x08(\nH\x01P\x01'

request_hash_1 = b'\x08\xf0\x01\x10\x07\x18\x01 \x01(\x010\x018\x01Z\x12\x82\x02\x0f\x08\x01\x10\x01\x18\x08Q\xbb\x891\xbe\xf8P\xe7D'

# print(request_hash_1.hex())
# print(get_base_info.hex())
#
# message = BleMessage(None)
#
# message.parseNotification()

converter = DatatypeConverter()
encoded_one = "CPQBEAcYASABKAEwATgBUghiBggBEAUYAnjC8dm+jDI="
decoded_one = converter.parseBase64Binary(encoded_one)
print(decoded_one.hex())
encoded_two = "CPQBEAcYASABKAEwATgBUghiBggBEAUYA3jH8dm+jDI="
decoded_two = converter.parseBase64Binary(encoded_two)
print(decoded_two.hex())
encoded_three = "CPgBEAcgASgBMAE4AUICCAN47/LZvowy" # ble sync
decoded_three = converter.parseBase64Binary(encoded_three)
print(decoded_three.hex())
encoded_four = "CPABEAcYASABKAEwATgBWgvyAQgIARACGAEgAXj1+9m+jDI="
decoded_four = converter.parseBase64Binary(encoded_four)
print(decoded_four.hex())
encoded_five = "CPABEAcYASABKAEwATgBWhOCAhAIARABGAgou5PG8Yuf1PNEeJn82b6MMg=="
decoded_five = converter.parseBase64Binary(encoded_five)
print(decoded_five.hex())
encoded_six = "CPABEAcYASABKAEwATgBWheCAhQIARACGAgou5PG8Yuf1PNEQAJIAXiXhNq+jDI="
decoded_six = converter.parseBase64Binary(encoded_six)
print(decoded_six.hex())
encoded_seven = "CPABEAcYASABKAEwATgBWheCAhQIARACGAgou5PG8Yuf1PNEQAJIAXi2i9q+jDI="
decoded_seven = converter.parseBase64Binary(encoded_seven)
print(decoded_seven.hex())
encoded_eight = "CPABEAcYASABKAEwATgBWheCAhQIARACGAgou5PG8Yuf1PNEQAJIAnjGi9q+jDI="
decoded_eight = converter.parseBase64Binary(encoded_eight)
print(decoded_eight.hex())
encoded_nine = "CPABEAcYASABKAEwATgBWhOCAhAIARABGAgovLLB6orP1sdveN+L2r6MMg=="
decoded_nine = converter.parseBase64Binary(encoded_nine)
print(decoded_nine.hex())
encoded_ten = "CPABEAcYASABKAEwATgBWheCAhQIARACGAgovLLB6orP1sdvQAJIAXi8k9q+jDI="
decoded_ten = converter.parseBase64Binary(encoded_ten)
print(decoded_ten.hex())
encoded_eleven = "CPABEAcYASABKAEwATgBWheCAhQIARACGAgovLLB6orP1sdvQAJIAnilm9q+jDI="
decoded_eleven = converter.parseBase64Binary(encoded_eleven)
print(decoded_eleven.hex())
encoded_twelve = "CPABEAcYASABKAEwATgBWrABggOsAQgBMJa2g+yCMkKgAXNcRz2cj0kLIg1Eo1NktkrU0GPcNaMDOUYKAXi/ALpQJBY7FMCZQlGEeySY5oVLJlhFlC9VTFUONidfCeP+5FPJcvkdczopOYC8+jPHXolwp8mBbyBebyB6RI63ddRIPOABmK99w7pS2RVmn19l/Bn361jCzSQHX6WVIwQjfjgIcfC+jb7QKmAraUZOo4V5HjHSalrYHecDvK2ODwejyEd4m7aD7IIy"
decoded_twelve = converter.parseBase64Binary(encoded_twelve)
print(decoded_twelve.hex())
# ble sync 3
encoded_thirteen = "CPABEAcYASABKAEwATgBWjaCAzMIATCNy4PsgjJCKJ8A9oNdlzUvzMVDFwkoii8x+xqO6AcWfiKC1MJm6Ed0N+ETuWZOqyB4kMuD7IIy"
decoded_thirteen = converter.parseBase64Binary(encoded_thirteen)
print(decoded_thirteen.hex())
# ble sync 3

# done twice
encoded_fourteen = "CPQBEAcYASABKAEwATgBUhmyAhYIARCQThjoByDoBzIJAAIDBAEGBwgJ"
decoded_fourteen = converter.parseBase64Binary(encoded_fourteen)
print(decoded_fourteen.hex())
# ble sync
list_decoded = [decoded_one, decoded_two, decoded_three, decoded_four, decoded_five, decoded_six, decoded_seven, decoded_eight, decoded_nine, decoded_ten, decoded_eleven, decoded_twelve, decoded_thirteen, decoded_fourteen]

for decoded in list_decoded:
    subprocess.run(f'echo {decoded.hex()} | xxd -r -p | protoc --proto_path=/home/michael/git/pyluba/ --decode LubaMsg pymammotion/proto/luba_msg.proto', shell=True)


thing = b'\x08\xf0\x01\x10\x07\x18\x01 \x01(\x010\x018\x01Z\x0b\xf2\x01\x08\x08\x01\x10\x02\x18\x01 \x01'

subprocess.run(
    f'echo {thing.hex()} | xxd -r -p | protoc --proto_path=/home/michael/git/pyluba/ --decode LubaMsg pymammotion/proto/luba_msg.proto',
    shell=True)

thing = b'\x08\xf8\x01\x10\x07 \x01(\x010\x018\x01B\x02\x08\x02'

subprocess.run(
    f'echo {thing.hex()} | xxd -r -p | protoc --proto_path=/home/michael/git/pyluba/ --decode LubaMsg pymammotion/proto/luba_msg.proto',
    shell=True)

thing = b'\x08\xf0\x01\x10\x01\x18\x07(\xd5\x070\x01Z\x95\x01\xfa\x01\x91\x01\x08\x01\x18\x01 \x010xj\x86\x01\xbb\x93\xc6\xf1\x8b\x9f\xd4\xf3D\xbc\xb2\xc1\xea\x8a\xcf\xd6\xc7o\xe1\xeb\xcc\xbf\xa7\xa3\x94\xc2\x07\xcd\xbb\xba\xe2\xa4\x88\xf5\x97E\xa4\xcc\x99\x91\xc2\xb3\xf9]\x80\xe8\xcc\xb3\xf1\xbb\xfc\xe5n\xb9\xd8\x96\xd0\x9e\xe6\xd6\xf5\x12\xe3\xe9\xe2\xc9\xea\x9a\x87\x88e\xf0\xe0\x81\xc0\xa4\xe5\x81\xc5G\xec\x95\xae\xaf\xbd\xd2\xec\x9f_\x86\x97\xd2\xd5\xaf\xc5\xf8\xa0z\xf8\xc4\x9b\xc8\xc7\xaf\xf2\xe9>\xc8\xa0\x8d\xdc\x9c\x9e\xed\xeb7\xbd\x8e\x81\x9e\xf7\x9d\x95\xe5o\xb8\xd4\xb7\xc6\xd0\xae\xcc\x9au'

subprocess.run(
    f'echo {thing.hex()} | xxd -r -p | protoc --proto_path=/home/michael/git/pyluba/ --decode LubaMsg pymammotion/proto/luba_msg.proto',
    shell=True)